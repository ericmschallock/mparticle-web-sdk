name: Pre-release SDK


on:
  pull_request
    # workflow_dispatch:
    #     inputs:
    #         dryRun:
    #             description: 'Do a dry run to preview instead of a real release [true/false]'
    #             required: true
    #             default: 'true'
    #         release-order:
    #             description: 'Which Phase are you releaseing? [release-order-a/release-order-b/release-order-c]'
    #             required: true

jobs:

    verify-release-branch:
      name: Verify Release Order Branch
      runs-on: ubuntu-latest
      steps:
        # TODO: Steps
        # 1. Check if input string for release order branch
        # 2. Check if input string for release/tag branch exists
        - name: Git checkout (Release Order D - should fail)
          uses: actions/checkout@v3
          with:
            ref: release-order-d

        - name: Echo Branches
          run: 
            export BRANCHES=$(git branch -r)
            echo $BRANCHES

        - name: Check if requested branch exists
          run: |
            export BRANCHES=$(git branch -r)
            echo $BRANCHES | grep relese-order-a
    # SDK release is done from master branch.
    # confirm-public-repo-master-branch:
    #     name: 'Confirm release is run from public/master branch'
    #     uses: mParticle/mparticle-workflows/.github/workflows/sdk-release-repo-branch-check.yml@main

    # TODO: Break this out into a reusable job
    # build-bundle:
    #     name: Build Distribution Bundle
    #     runs-on: ubuntu-latest
    #     # needs: confirm-public-repo-master-branch
    #     steps:
    #         - name: Checkout
    #           uses: actions/checkout@v3
    #           with:
    #                 ref: development

    #         - name: Get SDK Version
    #           id: sdk_version
    #           uses: ActionsTools/read-json-action@main
    #           with:
    #             file_path: "package.json"
    #             prop_path: "version"
            
    #         - name: Tag Package JSON as pre-release
    #           uses: jossef/action-set-json-field@v2.1
    #           with:
    #             file: package.json
    #             field: version
    #             value: ${{steps.sdk_version.outputs.value}}.pre-release
            
    #         - name: Check Package.json
    #           run: cat package.json

    #         - name: NPM install
    #           uses: actions/setup-node@v3
    #           with:
    #                 node-version: 16.x

    #         - name: Run NPM CI
    #           run: npm ci

    #         - name: Lint with ESLint
    #           run: npm run lint

    #         - name: Lint with Prettier
    #           run: npm run prettier

    #         - name: Run Build IIFE
    #           run: npm run build:iife

    #         - name: Display Bundle Diff, but Fancy!
    #           run: git diff --unified=3 dist/mparticle.js | npx diff-so-fancy

    #         - name: Archive npm failure logs
    #           uses: actions/upload-artifact@v2
    #           if: failure()
    #           with:
    #                 name: npm-logs
    #                 path: ~/.npm/_logs

    #         # TODO: Run all the tests

    #         create-release-branch:
    #           name: Create release branch
    #           runs-on: ubuntu-latest
    #           needs:
    #             - build-bundle
    #           steps:
    #               - name: Checkout development branch
    #                 uses: actions/checkout@v2
    #                 with:
    #                     repository: mparticle/mparticle-web-sdk
    #                     ref: development
      
    #               - name: Create and push release branch
    #                 run: |
    #                     git checkout -b release/${{ github.run_number }}
    #                     git push origin release/${{ github.run_number }}

    #           pre-release:
    #               name: Perform Pre-Release
    #               runs-on: ubuntu-latest
    #               needs:
    #                   - create-release-branch
    #               env:
    #                   GITHUB_TOKEN: ${{ secrets.MP_SEMANTIC_RELEASE_BOT }}
    #                   GIT_AUTHOR_NAME: mparticle-automation
    #                   GIT_AUTHOR_EMAIL: developers@mparticle.com
    #                   GIT_COMMITTER_NAME: mparticle-automation
    #                   GIT_COMMITTER_EMAIL: developers@mparticle.com
    #                   NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    #               steps:
    #                   - name: Checkout release branch
    #                     uses: actions/checkout@v3
    #                     with:
    #                         fetch-depth: 0
    #                         ref: master

    #                   - name: Import GPG Key
    #                     uses: crazy-max/ghaction-import-gpg@v4
    #                     with:
    #                         gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
    #                         passphrase: ${{ secrets.GPG_PASSPHRASE }}
    #                         git_user_signingkey: true
    #                         git_commit_gpgsign: true

    #                   - name: Merge release branch into master branch
    #                     run: |
    #                         git pull origin release/${{ github.run_number }}

    #                   - name: Setup Node.js
    #                     uses: actions/setup-node@v3
    #                     with:
    #                         node-version: 16.x

    #                   - name: Install dependencies
    #                     run: npm ci

    #                   - name: Release --dry-run
    #                     if: ${{ github.event.inputs.dryRun == 'true'}}
    #                     run: |
    #                         npx semantic-release --dry-run

    #                   - name: Release
    #                     if: ${{ github.event.inputs.dryRun == 'false'}}
    #                     run: |
    #                         npx semantic-release

    #                   - name: Archive npm failure logs
    #                     uses: actions/upload-artifact@v3
    #                     if: failure()
    #                     with:
    #                         name: npm-logs
    #                         path: ~/.npm/_logs

    #                   - name: Push automated release commits to release branch
    #                     if: ${{ github.event.inputs.dryRun == 'false' }}
    #                     run: |
    #                         git push origin HEAD:release/${{ github.run_number }}    